{"ast":null,"code":"/*!\n * on-headers\n * Copyright(c) 2014 Douglas Christopher Wilson\n * MIT Licensed\n */'use strict';/**\n * Module exports.\n * @public\n */module.exports=onHeaders;/**\n * Create a replacement writeHead method.\n *\n * @param {function} prevWriteHead\n * @param {function} listener\n * @private\n */function createWriteHead(prevWriteHead,listener){var fired=false;// return function with core name and argument list\nreturn function writeHead(statusCode){// set headers from arguments\nvar args=setWriteHeadHeaders.apply(this,arguments);// fire listener\nif(!fired){fired=true;listener.call(this);// pass-along an updated status code\nif(typeof args[0]==='number'&&this.statusCode!==args[0]){args[0]=this.statusCode;args.length=1;}}return prevWriteHead.apply(this,args);};}/**\n * Execute a listener when a response is about to write headers.\n *\n * @param {object} res\n * @return {function} listener\n * @public\n */function onHeaders(res,listener){if(!res){throw new TypeError('argument res is required');}if(typeof listener!=='function'){throw new TypeError('argument listener must be a function');}res.writeHead=createWriteHead(res.writeHead,listener);}/**\n * Set headers contained in array on the response object.\n *\n * @param {object} res\n * @param {array} headers\n * @private\n */function setHeadersFromArray(res,headers){for(var i=0;i<headers.length;i++){res.setHeader(headers[i][0],headers[i][1]);}}/**\n * Set headers contained in object on the response object.\n *\n * @param {object} res\n * @param {object} headers\n * @private\n */function setHeadersFromObject(res,headers){var keys=Object.keys(headers);for(var i=0;i<keys.length;i++){var k=keys[i];if(k)res.setHeader(k,headers[k]);}}/**\n * Set headers and other properties on the response object.\n *\n * @param {number} statusCode\n * @private\n */function setWriteHeadHeaders(statusCode){var length=arguments.length;var headerIndex=length>1&&typeof arguments[1]==='string'?2:1;var headers=length>=headerIndex+1?arguments[headerIndex]:undefined;this.statusCode=statusCode;if(Array.isArray(headers)){// handle array case\nsetHeadersFromArray(this,headers);}else if(headers){// handle object case\nsetHeadersFromObject(this,headers);}// copy leading arguments\nvar args=new Array(Math.min(length,headerIndex));for(var i=0;i<args.length;i++){args[i]=arguments[i];}return args;}","map":{"version":3,"names":["module","exports","onHeaders","createWriteHead","prevWriteHead","listener","fired","writeHead","statusCode","args","setWriteHeadHeaders","apply","arguments","call","length","res","TypeError","setHeadersFromArray","headers","i","setHeader","setHeadersFromObject","keys","Object","k","headerIndex","undefined","Array","isArray","Math","min"],"sources":["C:/Users/Autor/Desktop/LaRuinaTV/api/src/node_modules/on-headers/index.js"],"sourcesContent":["/*!\n * on-headers\n * Copyright(c) 2014 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = onHeaders\n\n/**\n * Create a replacement writeHead method.\n *\n * @param {function} prevWriteHead\n * @param {function} listener\n * @private\n */\n\nfunction createWriteHead (prevWriteHead, listener) {\n  var fired = false\n\n  // return function with core name and argument list\n  return function writeHead (statusCode) {\n    // set headers from arguments\n    var args = setWriteHeadHeaders.apply(this, arguments)\n\n    // fire listener\n    if (!fired) {\n      fired = true\n      listener.call(this)\n\n      // pass-along an updated status code\n      if (typeof args[0] === 'number' && this.statusCode !== args[0]) {\n        args[0] = this.statusCode\n        args.length = 1\n      }\n    }\n\n    return prevWriteHead.apply(this, args)\n  }\n}\n\n/**\n * Execute a listener when a response is about to write headers.\n *\n * @param {object} res\n * @return {function} listener\n * @public\n */\n\nfunction onHeaders (res, listener) {\n  if (!res) {\n    throw new TypeError('argument res is required')\n  }\n\n  if (typeof listener !== 'function') {\n    throw new TypeError('argument listener must be a function')\n  }\n\n  res.writeHead = createWriteHead(res.writeHead, listener)\n}\n\n/**\n * Set headers contained in array on the response object.\n *\n * @param {object} res\n * @param {array} headers\n * @private\n */\n\nfunction setHeadersFromArray (res, headers) {\n  for (var i = 0; i < headers.length; i++) {\n    res.setHeader(headers[i][0], headers[i][1])\n  }\n}\n\n/**\n * Set headers contained in object on the response object.\n *\n * @param {object} res\n * @param {object} headers\n * @private\n */\n\nfunction setHeadersFromObject (res, headers) {\n  var keys = Object.keys(headers)\n  for (var i = 0; i < keys.length; i++) {\n    var k = keys[i]\n    if (k) res.setHeader(k, headers[k])\n  }\n}\n\n/**\n * Set headers and other properties on the response object.\n *\n * @param {number} statusCode\n * @private\n */\n\nfunction setWriteHeadHeaders (statusCode) {\n  var length = arguments.length\n  var headerIndex = length > 1 && typeof arguments[1] === 'string'\n    ? 2\n    : 1\n\n  var headers = length >= headerIndex + 1\n    ? arguments[headerIndex]\n    : undefined\n\n  this.statusCode = statusCode\n\n  if (Array.isArray(headers)) {\n    // handle array case\n    setHeadersFromArray(this, headers)\n  } else if (headers) {\n    // handle object case\n    setHeadersFromObject(this, headers)\n  }\n\n  // copy leading arguments\n  var args = new Array(Math.min(length, headerIndex))\n  for (var i = 0; i < args.length; i++) {\n    args[i] = arguments[i]\n  }\n\n  return args\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,GAEA,YAAY,CAEZ;AACA;AACA;AACA,GAEAA,MAAM,CAACC,OAAO,CAAGC,SAAS,CAE1B;AACA;AACA;AACA;AACA;AACA;AACA,GAEA,QAASC,gBAAe,CAAEC,aAAa,CAAEC,QAAQ,CAAE,CACjD,GAAIC,MAAK,CAAG,KAAK,CAEjB;AACA,MAAO,SAASC,UAAS,CAAEC,UAAU,CAAE,CACrC;AACA,GAAIC,KAAI,CAAGC,mBAAmB,CAACC,KAAK,CAAC,IAAI,CAAEC,SAAS,CAAC,CAErD;AACA,GAAI,CAACN,KAAK,CAAE,CACVA,KAAK,CAAG,IAAI,CACZD,QAAQ,CAACQ,IAAI,CAAC,IAAI,CAAC,CAEnB;AACA,GAAI,MAAOJ,KAAI,CAAC,CAAC,CAAC,GAAK,QAAQ,EAAI,IAAI,CAACD,UAAU,GAAKC,IAAI,CAAC,CAAC,CAAC,CAAE,CAC9DA,IAAI,CAAC,CAAC,CAAC,CAAG,IAAI,CAACD,UAAU,CACzBC,IAAI,CAACK,MAAM,CAAG,CAAC,CACjB,CACF,CAEA,MAAOV,cAAa,CAACO,KAAK,CAAC,IAAI,CAAEF,IAAI,CAAC,CACxC,CAAC,CACH,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA,QAASP,UAAS,CAAEa,GAAG,CAAEV,QAAQ,CAAE,CACjC,GAAI,CAACU,GAAG,CAAE,CACR,KAAM,IAAIC,UAAS,CAAC,0BAA0B,CAAC,CACjD,CAEA,GAAI,MAAOX,SAAQ,GAAK,UAAU,CAAE,CAClC,KAAM,IAAIW,UAAS,CAAC,sCAAsC,CAAC,CAC7D,CAEAD,GAAG,CAACR,SAAS,CAAGJ,eAAe,CAACY,GAAG,CAACR,SAAS,CAAEF,QAAQ,CAAC,CAC1D,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA,QAASY,oBAAmB,CAAEF,GAAG,CAAEG,OAAO,CAAE,CAC1C,IAAK,GAAIC,EAAC,CAAG,CAAC,CAAEA,CAAC,CAAGD,OAAO,CAACJ,MAAM,CAAEK,CAAC,EAAE,CAAE,CACvCJ,GAAG,CAACK,SAAS,CAACF,OAAO,CAACC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAED,OAAO,CAACC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAC7C,CACF,CAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAEA,QAASE,qBAAoB,CAAEN,GAAG,CAAEG,OAAO,CAAE,CAC3C,GAAII,KAAI,CAAGC,MAAM,CAACD,IAAI,CAACJ,OAAO,CAAC,CAC/B,IAAK,GAAIC,EAAC,CAAG,CAAC,CAAEA,CAAC,CAAGG,IAAI,CAACR,MAAM,CAAEK,CAAC,EAAE,CAAE,CACpC,GAAIK,EAAC,CAAGF,IAAI,CAACH,CAAC,CAAC,CACf,GAAIK,CAAC,CAAET,GAAG,CAACK,SAAS,CAACI,CAAC,CAAEN,OAAO,CAACM,CAAC,CAAC,CAAC,CACrC,CACF,CAEA;AACA;AACA;AACA;AACA;AACA,GAEA,QAASd,oBAAmB,CAAEF,UAAU,CAAE,CACxC,GAAIM,OAAM,CAAGF,SAAS,CAACE,MAAM,CAC7B,GAAIW,YAAW,CAAGX,MAAM,CAAG,CAAC,EAAI,MAAOF,UAAS,CAAC,CAAC,CAAC,GAAK,QAAQ,CAC5D,CAAC,CACD,CAAC,CAEL,GAAIM,QAAO,CAAGJ,MAAM,EAAIW,WAAW,CAAG,CAAC,CACnCb,SAAS,CAACa,WAAW,CAAC,CACtBC,SAAS,CAEb,IAAI,CAAClB,UAAU,CAAGA,UAAU,CAE5B,GAAImB,KAAK,CAACC,OAAO,CAACV,OAAO,CAAC,CAAE,CAC1B;AACAD,mBAAmB,CAAC,IAAI,CAAEC,OAAO,CAAC,CACpC,CAAC,IAAM,IAAIA,OAAO,CAAE,CAClB;AACAG,oBAAoB,CAAC,IAAI,CAAEH,OAAO,CAAC,CACrC,CAEA;AACA,GAAIT,KAAI,CAAG,GAAIkB,MAAK,CAACE,IAAI,CAACC,GAAG,CAAChB,MAAM,CAAEW,WAAW,CAAC,CAAC,CACnD,IAAK,GAAIN,EAAC,CAAG,CAAC,CAAEA,CAAC,CAAGV,IAAI,CAACK,MAAM,CAAEK,CAAC,EAAE,CAAE,CACpCV,IAAI,CAACU,CAAC,CAAC,CAAGP,SAAS,CAACO,CAAC,CAAC,CACxB,CAEA,MAAOV,KAAI,CACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}