{"ast":null,"code":"/*!\n * express\n * Copyright(c) 2009-2013 TJ Holowaychuk\n * Copyright(c) 2013 Roman Shtylman\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n * @private\n */\nrequire('path-browserify\"');\nvar debug = require('debug')('express:view');\nvar path = require('path') ? resolve.fallback : {\n  \"path\": require.resolve(\"path-browserify\")\n};\nvar fs = require('fs');\n\n/**\n * Module variables.\n * @private\n */\n\nvar dirname = path.dirname;\nvar basename = path.basename;\nvar extname = path.extname;\nvar join = path.join;\nvar resolve = path.resolve;\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = View;\n\n/**\n * Initialize a new `View` with the given `name`.\n *\n * Options:\n *\n *   - `defaultEngine` the default template engine name\n *   - `engines` template engine require() cache\n *   - `root` root path for view lookup\n *\n * @param {string} name\n * @param {object} options\n * @public\n */\n\nfunction View(name, options) {\n  var opts = options || {};\n  this.defaultEngine = opts.defaultEngine;\n  this.ext = extname(name);\n  this.name = name;\n  this.root = opts.root;\n  if (!this.ext && !this.defaultEngine) {\n    throw new Error('No default engine was specified and no extension was provided.');\n  }\n  var fileName = name;\n  if (!this.ext) {\n    // get extension from default engine name\n    this.ext = this.defaultEngine[0] !== '.' ? '.' + this.defaultEngine : this.defaultEngine;\n    fileName += this.ext;\n  }\n  if (!opts.engines[this.ext]) {\n    // load engine\n    var mod = this.ext.slice(1);\n    debug('require \"%s\"', mod);\n\n    // default engine export\n    var fn = require(mod).__express;\n    if (typeof fn !== 'function') {\n      throw new Error('Module \"' + mod + '\" does not provide a view engine.');\n    }\n    opts.engines[this.ext] = fn;\n  }\n\n  // store loaded engine\n  this.engine = opts.engines[this.ext];\n\n  // lookup path\n  this.path = this.lookup(fileName);\n}\n\n/**\n * Lookup view by the given `name`\n *\n * @param {string} name\n * @private\n */\n\nView.prototype.lookup = function lookup(name) {\n  var path;\n  var roots = [].concat(this.root);\n  debug('lookup \"%s\"', name);\n  for (var i = 0; i < roots.length && !path; i++) {\n    var root = roots[i];\n\n    // resolve the path\n    var loc = resolve(root, name);\n    var dir = dirname(loc);\n    var file = basename(loc);\n\n    // resolve the file\n    path = this.resolve(dir, file);\n  }\n  return path;\n};\n\n/**\n * Render with the given options.\n *\n * @param {object} options\n * @param {function} callback\n * @private\n */\n\nView.prototype.render = function render(options, callback) {\n  debug('render \"%s\"', this.path);\n  this.engine(this.path, options, callback);\n};\n\n/**\n * Resolve the file within the given directory.\n *\n * @param {string} dir\n * @param {string} file\n * @private\n */\n\nView.prototype.resolve = function resolve(dir, file) {\n  var ext = this.ext;\n\n  // <path>.<ext>\n  var path = join(dir, file);\n  var stat = tryStat(path);\n  if (stat && stat.isFile()) {\n    return path;\n  }\n\n  // <path>/index.<ext>\n  path = join(dir, basename(file, ext), 'index' + ext);\n  stat = tryStat(path);\n  if (stat && stat.isFile()) {\n    return path;\n  }\n};\n\n/**\n * Return a stat, maybe.\n *\n * @param {string} path\n * @return {fs.Stats}\n * @private\n */\n\nfunction tryStat(path) {\n  debug('stat \"%s\"', path);\n  try {\n    return fs.statSync(path);\n  } catch (e) {\n    return undefined;\n  }\n}","map":{"version":3,"names":["require","debug","path","resolve","fallback","fs","dirname","basename","extname","join","module","exports","View","name","options","opts","defaultEngine","ext","root","Error","fileName","engines","mod","slice","fn","__express","engine","lookup","prototype","roots","concat","i","length","loc","dir","file","render","callback","stat","tryStat","isFile","statSync","e","undefined"],"sources":["C:/Users/Autor/Desktop/LaRuinaTV/api/node_modules/express/lib/view.js"],"sourcesContent":["/*!\n * express\n * Copyright(c) 2009-2013 TJ Holowaychuk\n * Copyright(c) 2013 Roman Shtylman\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n * @private\n */\nrequire('path-browserify\"')\n\nvar debug = require('debug')('express:view');\nvar path = require('path')?resolve.fallback: { \"path\": require.resolve(\"path-browserify\") };\nvar fs = require('fs');\n\n/**\n * Module variables.\n * @private\n */\n\nvar dirname = path.dirname;\nvar basename = path.basename;\nvar extname = path.extname;\nvar join = path.join;\nvar resolve = path.resolve;\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = View;\n\n/**\n * Initialize a new `View` with the given `name`.\n *\n * Options:\n *\n *   - `defaultEngine` the default template engine name\n *   - `engines` template engine require() cache\n *   - `root` root path for view lookup\n *\n * @param {string} name\n * @param {object} options\n * @public\n */\n\nfunction View(name, options) {\n  var opts = options || {};\n\n  this.defaultEngine = opts.defaultEngine;\n  this.ext = extname(name);\n  this.name = name;\n  this.root = opts.root;\n\n  if (!this.ext && !this.defaultEngine) {\n    throw new Error('No default engine was specified and no extension was provided.');\n  }\n\n  var fileName = name;\n\n  if (!this.ext) {\n    // get extension from default engine name\n    this.ext = this.defaultEngine[0] !== '.'\n      ? '.' + this.defaultEngine\n      : this.defaultEngine;\n\n    fileName += this.ext;\n  }\n\n  if (!opts.engines[this.ext]) {\n    // load engine\n    var mod = this.ext.slice(1)\n    debug('require \"%s\"', mod)\n\n    // default engine export\n    var fn = require(mod).__express\n\n    if (typeof fn !== 'function') {\n      throw new Error('Module \"' + mod + '\" does not provide a view engine.')\n    }\n\n    opts.engines[this.ext] = fn\n  }\n\n  // store loaded engine\n  this.engine = opts.engines[this.ext];\n\n  // lookup path\n  this.path = this.lookup(fileName);\n}\n\n/**\n * Lookup view by the given `name`\n *\n * @param {string} name\n * @private\n */\n\nView.prototype.lookup = function lookup(name) {\n  var path;\n  var roots = [].concat(this.root);\n\n  debug('lookup \"%s\"', name);\n\n  for (var i = 0; i < roots.length && !path; i++) {\n    var root = roots[i];\n\n    // resolve the path\n    var loc = resolve(root, name);\n    var dir = dirname(loc);\n    var file = basename(loc);\n\n    // resolve the file\n    path = this.resolve(dir, file);\n    \n  }\n\n  return path;\n};\n\n/**\n * Render with the given options.\n *\n * @param {object} options\n * @param {function} callback\n * @private\n */\n\nView.prototype.render = function render(options, callback) {\n  debug('render \"%s\"', this.path);\n  this.engine(this.path, options, callback);\n};\n\n/**\n * Resolve the file within the given directory.\n *\n * @param {string} dir\n * @param {string} file\n * @private\n */\n\nView.prototype.resolve = function resolve(dir, file) {\n  var ext = this.ext;\n\n  // <path>.<ext>\n  var path = join(dir, file);\n  var stat = tryStat(path);\n\n  if (stat && stat.isFile()) {\n    return path;\n  }\n\n  // <path>/index.<ext>\n  path = join(dir, basename(file, ext), 'index' + ext);\n  stat = tryStat(path);\n\n  if (stat && stat.isFile()) {\n    return path;\n  }\n};\n\n/**\n * Return a stat, maybe.\n *\n * @param {string} path\n * @return {fs.Stats}\n * @private\n */\n\nfunction tryStat(path) {\n  debug('stat \"%s\"', path);\n\n  try {\n    return fs.statSync(path);\n  } catch (e) {\n    return undefined;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}