{"ast":null,"code":"/*!\n * accepts\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */'use strict';/**\n * Module dependencies.\n * @private\n */var Negotiator=require('negotiator');var mime=require('mime-types');/**\n * Module exports.\n * @public\n */module.exports=Accepts;/**\n * Create a new Accepts object for the given req.\n *\n * @param {object} req\n * @public\n */function Accepts(req){if(!(this instanceof Accepts)){return new Accepts(req);}this.headers=req.headers;this.negotiator=new Negotiator(req);}/**\n * Check if the given `type(s)` is acceptable, returning\n * the best match when true, otherwise `undefined`, in which\n * case you should respond with 406 \"Not Acceptable\".\n *\n * The `type` value may be a single mime type string\n * such as \"application/json\", the extension name\n * such as \"json\" or an array `[\"json\", \"html\", \"text/plain\"]`. When a list\n * or array is given the _best_ match, if any is returned.\n *\n * Examples:\n *\n *     // Accept: text/html\n *     this.types('html');\n *     // => \"html\"\n *\n *     // Accept: text/*, application/json\n *     this.types('html');\n *     // => \"html\"\n *     this.types('text/html');\n *     // => \"text/html\"\n *     this.types('json', 'text');\n *     // => \"json\"\n *     this.types('application/json');\n *     // => \"application/json\"\n *\n *     // Accept: text/*, application/json\n *     this.types('image/png');\n *     this.types('png');\n *     // => undefined\n *\n *     // Accept: text/*;q=.5, application/json\n *     this.types(['html', 'json']);\n *     this.types('html', 'json');\n *     // => \"json\"\n *\n * @param {String|Array} types...\n * @return {String|Array|Boolean}\n * @public\n */Accepts.prototype.type=Accepts.prototype.types=function(types_){var types=types_;// support flattened arguments\nif(types&&!Array.isArray(types)){types=new Array(arguments.length);for(var i=0;i<types.length;i++){types[i]=arguments[i];}}// no types, return all requested types\nif(!types||types.length===0){return this.negotiator.mediaTypes();}// no accept header, return first given type\nif(!this.headers.accept){return types[0];}var mimes=types.map(extToMime);var accepts=this.negotiator.mediaTypes(mimes.filter(validMime));var first=accepts[0];return first?types[mimes.indexOf(first)]:false;};/**\n * Return accepted encodings or best fit based on `encodings`.\n *\n * Given `Accept-Encoding: gzip, deflate`\n * an array sorted by quality is returned:\n *\n *     ['gzip', 'deflate']\n *\n * @param {String|Array} encodings...\n * @return {String|Array}\n * @public\n */Accepts.prototype.encoding=Accepts.prototype.encodings=function(encodings_){var encodings=encodings_;// support flattened arguments\nif(encodings&&!Array.isArray(encodings)){encodings=new Array(arguments.length);for(var i=0;i<encodings.length;i++){encodings[i]=arguments[i];}}// no encodings, return all requested encodings\nif(!encodings||encodings.length===0){return this.negotiator.encodings();}return this.negotiator.encodings(encodings)[0]||false;};/**\n * Return accepted charsets or best fit based on `charsets`.\n *\n * Given `Accept-Charset: utf-8, iso-8859-1;q=0.2, utf-7;q=0.5`\n * an array sorted by quality is returned:\n *\n *     ['utf-8', 'utf-7', 'iso-8859-1']\n *\n * @param {String|Array} charsets...\n * @return {String|Array}\n * @public\n */Accepts.prototype.charset=Accepts.prototype.charsets=function(charsets_){var charsets=charsets_;// support flattened arguments\nif(charsets&&!Array.isArray(charsets)){charsets=new Array(arguments.length);for(var i=0;i<charsets.length;i++){charsets[i]=arguments[i];}}// no charsets, return all requested charsets\nif(!charsets||charsets.length===0){return this.negotiator.charsets();}return this.negotiator.charsets(charsets)[0]||false;};/**\n * Return accepted languages or best fit based on `langs`.\n *\n * Given `Accept-Language: en;q=0.8, es, pt`\n * an array sorted by quality is returned:\n *\n *     ['es', 'pt', 'en']\n *\n * @param {String|Array} langs...\n * @return {Array|String}\n * @public\n */Accepts.prototype.lang=Accepts.prototype.langs=Accepts.prototype.language=Accepts.prototype.languages=function(languages_){var languages=languages_;// support flattened arguments\nif(languages&&!Array.isArray(languages)){languages=new Array(arguments.length);for(var i=0;i<languages.length;i++){languages[i]=arguments[i];}}// no languages, return all requested languages\nif(!languages||languages.length===0){return this.negotiator.languages();}return this.negotiator.languages(languages)[0]||false;};/**\n * Convert extnames to mime.\n *\n * @param {String} type\n * @return {String}\n * @private\n */function extToMime(type){return type.indexOf('/')===-1?mime.lookup(type):type;}/**\n * Check if mime is valid.\n *\n * @param {String} type\n * @return {String}\n * @private\n */function validMime(type){return typeof type==='string';}","map":{"version":3,"names":["Negotiator","require","mime","module","exports","Accepts","req","headers","negotiator","prototype","type","types","types_","Array","isArray","arguments","length","i","mediaTypes","accept","mimes","map","extToMime","accepts","filter","validMime","first","indexOf","encoding","encodings","encodings_","charset","charsets","charsets_","lang","langs","language","languages","languages_","lookup"],"sources":["C:/Users/Autor/Desktop/LaRuinaTV/api/src/node_modules/accepts/index.js"],"sourcesContent":["/*!\n * accepts\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar Negotiator = require('negotiator')\nvar mime = require('mime-types')\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = Accepts\n\n/**\n * Create a new Accepts object for the given req.\n *\n * @param {object} req\n * @public\n */\n\nfunction Accepts (req) {\n  if (!(this instanceof Accepts)) {\n    return new Accepts(req)\n  }\n\n  this.headers = req.headers\n  this.negotiator = new Negotiator(req)\n}\n\n/**\n * Check if the given `type(s)` is acceptable, returning\n * the best match when true, otherwise `undefined`, in which\n * case you should respond with 406 \"Not Acceptable\".\n *\n * The `type` value may be a single mime type string\n * such as \"application/json\", the extension name\n * such as \"json\" or an array `[\"json\", \"html\", \"text/plain\"]`. When a list\n * or array is given the _best_ match, if any is returned.\n *\n * Examples:\n *\n *     // Accept: text/html\n *     this.types('html');\n *     // => \"html\"\n *\n *     // Accept: text/*, application/json\n *     this.types('html');\n *     // => \"html\"\n *     this.types('text/html');\n *     // => \"text/html\"\n *     this.types('json', 'text');\n *     // => \"json\"\n *     this.types('application/json');\n *     // => \"application/json\"\n *\n *     // Accept: text/*, application/json\n *     this.types('image/png');\n *     this.types('png');\n *     // => undefined\n *\n *     // Accept: text/*;q=.5, application/json\n *     this.types(['html', 'json']);\n *     this.types('html', 'json');\n *     // => \"json\"\n *\n * @param {String|Array} types...\n * @return {String|Array|Boolean}\n * @public\n */\n\nAccepts.prototype.type =\nAccepts.prototype.types = function (types_) {\n  var types = types_\n\n  // support flattened arguments\n  if (types && !Array.isArray(types)) {\n    types = new Array(arguments.length)\n    for (var i = 0; i < types.length; i++) {\n      types[i] = arguments[i]\n    }\n  }\n\n  // no types, return all requested types\n  if (!types || types.length === 0) {\n    return this.negotiator.mediaTypes()\n  }\n\n  // no accept header, return first given type\n  if (!this.headers.accept) {\n    return types[0]\n  }\n\n  var mimes = types.map(extToMime)\n  var accepts = this.negotiator.mediaTypes(mimes.filter(validMime))\n  var first = accepts[0]\n\n  return first\n    ? types[mimes.indexOf(first)]\n    : false\n}\n\n/**\n * Return accepted encodings or best fit based on `encodings`.\n *\n * Given `Accept-Encoding: gzip, deflate`\n * an array sorted by quality is returned:\n *\n *     ['gzip', 'deflate']\n *\n * @param {String|Array} encodings...\n * @return {String|Array}\n * @public\n */\n\nAccepts.prototype.encoding =\nAccepts.prototype.encodings = function (encodings_) {\n  var encodings = encodings_\n\n  // support flattened arguments\n  if (encodings && !Array.isArray(encodings)) {\n    encodings = new Array(arguments.length)\n    for (var i = 0; i < encodings.length; i++) {\n      encodings[i] = arguments[i]\n    }\n  }\n\n  // no encodings, return all requested encodings\n  if (!encodings || encodings.length === 0) {\n    return this.negotiator.encodings()\n  }\n\n  return this.negotiator.encodings(encodings)[0] || false\n}\n\n/**\n * Return accepted charsets or best fit based on `charsets`.\n *\n * Given `Accept-Charset: utf-8, iso-8859-1;q=0.2, utf-7;q=0.5`\n * an array sorted by quality is returned:\n *\n *     ['utf-8', 'utf-7', 'iso-8859-1']\n *\n * @param {String|Array} charsets...\n * @return {String|Array}\n * @public\n */\n\nAccepts.prototype.charset =\nAccepts.prototype.charsets = function (charsets_) {\n  var charsets = charsets_\n\n  // support flattened arguments\n  if (charsets && !Array.isArray(charsets)) {\n    charsets = new Array(arguments.length)\n    for (var i = 0; i < charsets.length; i++) {\n      charsets[i] = arguments[i]\n    }\n  }\n\n  // no charsets, return all requested charsets\n  if (!charsets || charsets.length === 0) {\n    return this.negotiator.charsets()\n  }\n\n  return this.negotiator.charsets(charsets)[0] || false\n}\n\n/**\n * Return accepted languages or best fit based on `langs`.\n *\n * Given `Accept-Language: en;q=0.8, es, pt`\n * an array sorted by quality is returned:\n *\n *     ['es', 'pt', 'en']\n *\n * @param {String|Array} langs...\n * @return {Array|String}\n * @public\n */\n\nAccepts.prototype.lang =\nAccepts.prototype.langs =\nAccepts.prototype.language =\nAccepts.prototype.languages = function (languages_) {\n  var languages = languages_\n\n  // support flattened arguments\n  if (languages && !Array.isArray(languages)) {\n    languages = new Array(arguments.length)\n    for (var i = 0; i < languages.length; i++) {\n      languages[i] = arguments[i]\n    }\n  }\n\n  // no languages, return all requested languages\n  if (!languages || languages.length === 0) {\n    return this.negotiator.languages()\n  }\n\n  return this.negotiator.languages(languages)[0] || false\n}\n\n/**\n * Convert extnames to mime.\n *\n * @param {String} type\n * @return {String}\n * @private\n */\n\nfunction extToMime (type) {\n  return type.indexOf('/') === -1\n    ? mime.lookup(type)\n    : type\n}\n\n/**\n * Check if mime is valid.\n *\n * @param {String} type\n * @return {String}\n * @private\n */\n\nfunction validMime (type) {\n  return typeof type === 'string'\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}