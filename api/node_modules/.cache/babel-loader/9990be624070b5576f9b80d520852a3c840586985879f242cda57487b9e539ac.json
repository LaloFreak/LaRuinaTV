{"ast":null,"code":"/*!\n * range-parser\n * Copyright(c) 2012-2014 TJ Holowaychuk\n * Copyright(c) 2015-2016 Douglas Christopher Wilson\n * MIT Licensed\n */'use strict';/**\n * Module exports.\n * @public\n */module.exports=rangeParser;/**\n * Parse \"Range\" header `str` relative to the given file `size`.\n *\n * @param {Number} size\n * @param {String} str\n * @param {Object} [options]\n * @return {Array}\n * @public\n */function rangeParser(size,str,options){if(typeof str!=='string'){throw new TypeError('argument str must be a string');}var index=str.indexOf('=');if(index===-1){return-2;}// split the range string\nvar arr=str.slice(index+1).split(',');var ranges=[];// add ranges type\nranges.type=str.slice(0,index);// parse all ranges\nfor(var i=0;i<arr.length;i++){var range=arr[i].split('-');var start=parseInt(range[0],10);var end=parseInt(range[1],10);// -nnn\nif(isNaN(start)){start=size-end;end=size-1;// nnn-\n}else if(isNaN(end)){end=size-1;}// limit last-byte-pos to current length\nif(end>size-1){end=size-1;}// invalid or unsatisifiable\nif(isNaN(start)||isNaN(end)||start>end||start<0){continue;}// add range\nranges.push({start:start,end:end});}if(ranges.length<1){// unsatisifiable\nreturn-1;}return options&&options.combine?combineRanges(ranges):ranges;}/**\n * Combine overlapping & adjacent ranges.\n * @private\n */function combineRanges(ranges){var ordered=ranges.map(mapWithIndex).sort(sortByRangeStart);for(var j=0,i=1;i<ordered.length;i++){var range=ordered[i];var current=ordered[j];if(range.start>current.end+1){// next range\nordered[++j]=range;}else if(range.end>current.end){// extend range\ncurrent.end=range.end;current.index=Math.min(current.index,range.index);}}// trim ordered array\nordered.length=j+1;// generate combined range\nvar combined=ordered.sort(sortByRangeIndex).map(mapWithoutIndex);// copy ranges type\ncombined.type=ranges.type;return combined;}/**\n * Map function to add index value to ranges.\n * @private\n */function mapWithIndex(range,index){return{start:range.start,end:range.end,index:index};}/**\n * Map function to remove index value from ranges.\n * @private\n */function mapWithoutIndex(range){return{start:range.start,end:range.end};}/**\n * Sort function to sort ranges by index.\n * @private\n */function sortByRangeIndex(a,b){return a.index-b.index;}/**\n * Sort function to sort ranges by start position.\n * @private\n */function sortByRangeStart(a,b){return a.start-b.start;}","map":{"version":3,"names":["module","exports","rangeParser","size","str","options","TypeError","index","indexOf","arr","slice","split","ranges","type","i","length","range","start","parseInt","end","isNaN","push","combine","combineRanges","ordered","map","mapWithIndex","sort","sortByRangeStart","j","current","Math","min","combined","sortByRangeIndex","mapWithoutIndex","a","b"],"sources":["C:/Users/Autor/Desktop/LaRuinaTV/api/src/node_modules/range-parser/index.js"],"sourcesContent":["/*!\n * range-parser\n * Copyright(c) 2012-2014 TJ Holowaychuk\n * Copyright(c) 2015-2016 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = rangeParser\n\n/**\n * Parse \"Range\" header `str` relative to the given file `size`.\n *\n * @param {Number} size\n * @param {String} str\n * @param {Object} [options]\n * @return {Array}\n * @public\n */\n\nfunction rangeParser (size, str, options) {\n  if (typeof str !== 'string') {\n    throw new TypeError('argument str must be a string')\n  }\n\n  var index = str.indexOf('=')\n\n  if (index === -1) {\n    return -2\n  }\n\n  // split the range string\n  var arr = str.slice(index + 1).split(',')\n  var ranges = []\n\n  // add ranges type\n  ranges.type = str.slice(0, index)\n\n  // parse all ranges\n  for (var i = 0; i < arr.length; i++) {\n    var range = arr[i].split('-')\n    var start = parseInt(range[0], 10)\n    var end = parseInt(range[1], 10)\n\n    // -nnn\n    if (isNaN(start)) {\n      start = size - end\n      end = size - 1\n    // nnn-\n    } else if (isNaN(end)) {\n      end = size - 1\n    }\n\n    // limit last-byte-pos to current length\n    if (end > size - 1) {\n      end = size - 1\n    }\n\n    // invalid or unsatisifiable\n    if (isNaN(start) || isNaN(end) || start > end || start < 0) {\n      continue\n    }\n\n    // add range\n    ranges.push({\n      start: start,\n      end: end\n    })\n  }\n\n  if (ranges.length < 1) {\n    // unsatisifiable\n    return -1\n  }\n\n  return options && options.combine\n    ? combineRanges(ranges)\n    : ranges\n}\n\n/**\n * Combine overlapping & adjacent ranges.\n * @private\n */\n\nfunction combineRanges (ranges) {\n  var ordered = ranges.map(mapWithIndex).sort(sortByRangeStart)\n\n  for (var j = 0, i = 1; i < ordered.length; i++) {\n    var range = ordered[i]\n    var current = ordered[j]\n\n    if (range.start > current.end + 1) {\n      // next range\n      ordered[++j] = range\n    } else if (range.end > current.end) {\n      // extend range\n      current.end = range.end\n      current.index = Math.min(current.index, range.index)\n    }\n  }\n\n  // trim ordered array\n  ordered.length = j + 1\n\n  // generate combined range\n  var combined = ordered.sort(sortByRangeIndex).map(mapWithoutIndex)\n\n  // copy ranges type\n  combined.type = ranges.type\n\n  return combined\n}\n\n/**\n * Map function to add index value to ranges.\n * @private\n */\n\nfunction mapWithIndex (range, index) {\n  return {\n    start: range.start,\n    end: range.end,\n    index: index\n  }\n}\n\n/**\n * Map function to remove index value from ranges.\n * @private\n */\n\nfunction mapWithoutIndex (range) {\n  return {\n    start: range.start,\n    end: range.end\n  }\n}\n\n/**\n * Sort function to sort ranges by index.\n * @private\n */\n\nfunction sortByRangeIndex (a, b) {\n  return a.index - b.index\n}\n\n/**\n * Sort function to sort ranges by start position.\n * @private\n */\n\nfunction sortByRangeStart (a, b) {\n  return a.start - b.start\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}