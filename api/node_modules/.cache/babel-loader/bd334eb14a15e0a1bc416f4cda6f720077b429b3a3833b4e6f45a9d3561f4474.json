{"ast":null,"code":"/*!\n * express\n * Copyright(c) 2009-2013 TJ Holowaychuk\n * Copyright(c) 2013 Roman Shtylman\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */'use strict';/**\n * Module dependencies.\n * @private\n */var accepts=require('accepts');var deprecate=require('depd')('express');var isIP=require('net').isIP;var typeis=require('type-is');var http=require('http');var fresh=require('fresh');var parseRange=require('range-parser');var parse=require('parseurl');var proxyaddr=require('proxy-addr');/**\n * Request prototype.\n * @public\n */var req=Object.create(http.IncomingMessage.prototype);/**\n * Module exports.\n * @public\n */module.exports=req;/**\n * Return request header.\n *\n * The `Referrer` header field is special-cased,\n * both `Referrer` and `Referer` are interchangeable.\n *\n * Examples:\n *\n *     req.get('Content-Type');\n *     // => \"text/plain\"\n *\n *     req.get('content-type');\n *     // => \"text/plain\"\n *\n *     req.get('Something');\n *     // => undefined\n *\n * Aliased as `req.header()`.\n *\n * @param {String} name\n * @return {String}\n * @public\n */req.get=req.header=function header(name){if(!name){throw new TypeError('name argument is required to req.get');}if(typeof name!=='string'){throw new TypeError('name must be a string to req.get');}var lc=name.toLowerCase();switch(lc){case'referer':case'referrer':return this.headers.referrer||this.headers.referer;default:return this.headers[lc];}};/**\n * To do: update docs.\n *\n * Check if the given `type(s)` is acceptable, returning\n * the best match when true, otherwise `undefined`, in which\n * case you should respond with 406 \"Not Acceptable\".\n *\n * The `type` value may be a single MIME type string\n * such as \"application/json\", an extension name\n * such as \"json\", a comma-delimited list such as \"json, html, text/plain\",\n * an argument list such as `\"json\", \"html\", \"text/plain\"`,\n * or an array `[\"json\", \"html\", \"text/plain\"]`. When a list\n * or array is given, the _best_ match, if any is returned.\n *\n * Examples:\n *\n *     // Accept: text/html\n *     req.accepts('html');\n *     // => \"html\"\n *\n *     // Accept: text/*, application/json\n *     req.accepts('html');\n *     // => \"html\"\n *     req.accepts('text/html');\n *     // => \"text/html\"\n *     req.accepts('json, text');\n *     // => \"json\"\n *     req.accepts('application/json');\n *     // => \"application/json\"\n *\n *     // Accept: text/*, application/json\n *     req.accepts('image/png');\n *     req.accepts('png');\n *     // => undefined\n *\n *     // Accept: text/*;q=.5, application/json\n *     req.accepts(['html', 'json']);\n *     req.accepts('html', 'json');\n *     req.accepts('html, json');\n *     // => \"json\"\n *\n * @param {String|Array} type(s)\n * @return {String|Array|Boolean}\n * @public\n */req.accepts=function(){var accept=accepts(this);return accept.types.apply(accept,arguments);};/**\n * Check if the given `encoding`s are accepted.\n *\n * @param {String} ...encoding\n * @return {String|Array}\n * @public\n */req.acceptsEncodings=function(){var accept=accepts(this);return accept.encodings.apply(accept,arguments);};req.acceptsEncoding=deprecate.function(req.acceptsEncodings,'req.acceptsEncoding: Use acceptsEncodings instead');/**\n * Check if the given `charset`s are acceptable,\n * otherwise you should respond with 406 \"Not Acceptable\".\n *\n * @param {String} ...charset\n * @return {String|Array}\n * @public\n */req.acceptsCharsets=function(){var accept=accepts(this);return accept.charsets.apply(accept,arguments);};req.acceptsCharset=deprecate.function(req.acceptsCharsets,'req.acceptsCharset: Use acceptsCharsets instead');/**\n * Check if the given `lang`s are acceptable,\n * otherwise you should respond with 406 \"Not Acceptable\".\n *\n * @param {String} ...lang\n * @return {String|Array}\n * @public\n */req.acceptsLanguages=function(){var accept=accepts(this);return accept.languages.apply(accept,arguments);};req.acceptsLanguage=deprecate.function(req.acceptsLanguages,'req.acceptsLanguage: Use acceptsLanguages instead');/**\n * Parse Range header field, capping to the given `size`.\n *\n * Unspecified ranges such as \"0-\" require knowledge of your resource length. In\n * the case of a byte range this is of course the total number of bytes. If the\n * Range header field is not given `undefined` is returned, `-1` when unsatisfiable,\n * and `-2` when syntactically invalid.\n *\n * When ranges are returned, the array has a \"type\" property which is the type of\n * range that is required (most commonly, \"bytes\"). Each array element is an object\n * with a \"start\" and \"end\" property for the portion of the range.\n *\n * The \"combine\" option can be set to `true` and overlapping & adjacent ranges\n * will be combined into a single range.\n *\n * NOTE: remember that ranges are inclusive, so for example \"Range: users=0-3\"\n * should respond with 4 users when available, not 3.\n *\n * @param {number} size\n * @param {object} [options]\n * @param {boolean} [options.combine=false]\n * @return {number|array}\n * @public\n */req.range=function range(size,options){var range=this.get('Range');if(!range)return;return parseRange(size,range,options);};/**\n * Return the value of param `name` when present or `defaultValue`.\n *\n *  - Checks route placeholders, ex: _/user/:id_\n *  - Checks body params, ex: id=12, {\"id\":12}\n *  - Checks query string params, ex: ?id=12\n *\n * To utilize request bodies, `req.body`\n * should be an object. This can be done by using\n * the `bodyParser()` middleware.\n *\n * @param {String} name\n * @param {Mixed} [defaultValue]\n * @return {String}\n * @public\n */req.param=function param(name,defaultValue){var params=this.params||{};var body=this.body||{};var query=this.query||{};var args=arguments.length===1?'name':'name, default';deprecate('req.param('+args+'): Use req.params, req.body, or req.query instead');if(null!=params[name]&&params.hasOwnProperty(name))return params[name];if(null!=body[name])return body[name];if(null!=query[name])return query[name];return defaultValue;};/**\n * Check if the incoming request contains the \"Content-Type\"\n * header field, and it contains the given mime `type`.\n *\n * Examples:\n *\n *      // With Content-Type: text/html; charset=utf-8\n *      req.is('html');\n *      req.is('text/html');\n *      req.is('text/*');\n *      // => true\n *\n *      // When Content-Type is application/json\n *      req.is('json');\n *      req.is('application/json');\n *      req.is('application/*');\n *      // => true\n *\n *      req.is('html');\n *      // => false\n *\n * @param {String|Array} types...\n * @return {String|false|null}\n * @public\n */req.is=function is(types){var arr=types;// support flattened arguments\nif(!Array.isArray(types)){arr=new Array(arguments.length);for(var i=0;i<arr.length;i++){arr[i]=arguments[i];}}return typeis(this,arr);};/**\n * Return the protocol string \"http\" or \"https\"\n * when requested with TLS. When the \"trust proxy\"\n * setting trusts the socket address, the\n * \"X-Forwarded-Proto\" header field will be trusted\n * and used if present.\n *\n * If you're running behind a reverse proxy that\n * supplies https for you this may be enabled.\n *\n * @return {String}\n * @public\n */defineGetter(req,'protocol',function protocol(){var proto=this.connection.encrypted?'https':'http';var trust=this.app.get('trust proxy fn');if(!trust(this.connection.remoteAddress,0)){return proto;}// Note: X-Forwarded-Proto is normally only ever a\n//       single value, but this is to be safe.\nvar header=this.get('X-Forwarded-Proto')||proto;var index=header.indexOf(',');return index!==-1?header.substring(0,index).trim():header.trim();});/**\n * Short-hand for:\n *\n *    req.protocol === 'https'\n *\n * @return {Boolean}\n * @public\n */defineGetter(req,'secure',function secure(){return this.protocol==='https';});/**\n * Return the remote address from the trusted proxy.\n *\n * The is the remote address on the socket unless\n * \"trust proxy\" is set.\n *\n * @return {String}\n * @public\n */defineGetter(req,'ip',function ip(){var trust=this.app.get('trust proxy fn');return proxyaddr(this,trust);});/**\n * When \"trust proxy\" is set, trusted proxy addresses + client.\n *\n * For example if the value were \"client, proxy1, proxy2\"\n * you would receive the array `[\"client\", \"proxy1\", \"proxy2\"]`\n * where \"proxy2\" is the furthest down-stream and \"proxy1\" and\n * \"proxy2\" were trusted.\n *\n * @return {Array}\n * @public\n */defineGetter(req,'ips',function ips(){var trust=this.app.get('trust proxy fn');var addrs=proxyaddr.all(this,trust);// reverse the order (to farthest -> closest)\n// and remove socket address\naddrs.reverse().pop();return addrs;});/**\n * Return subdomains as an array.\n *\n * Subdomains are the dot-separated parts of the host before the main domain of\n * the app. By default, the domain of the app is assumed to be the last two\n * parts of the host. This can be changed by setting \"subdomain offset\".\n *\n * For example, if the domain is \"tobi.ferrets.example.com\":\n * If \"subdomain offset\" is not set, req.subdomains is `[\"ferrets\", \"tobi\"]`.\n * If \"subdomain offset\" is 3, req.subdomains is `[\"tobi\"]`.\n *\n * @return {Array}\n * @public\n */defineGetter(req,'subdomains',function subdomains(){var hostname=this.hostname;if(!hostname)return[];var offset=this.app.get('subdomain offset');var subdomains=!isIP(hostname)?hostname.split('.').reverse():[hostname];return subdomains.slice(offset);});/**\n * Short-hand for `url.parse(req.url).pathname`.\n *\n * @return {String}\n * @public\n */defineGetter(req,'path',function path(){return parse(this).pathname;});/**\n * Parse the \"Host\" header field to a hostname.\n *\n * When the \"trust proxy\" setting trusts the socket\n * address, the \"X-Forwarded-Host\" header field will\n * be trusted.\n *\n * @return {String}\n * @public\n */defineGetter(req,'hostname',function hostname(){var trust=this.app.get('trust proxy fn');var host=this.get('X-Forwarded-Host');if(!host||!trust(this.connection.remoteAddress,0)){host=this.get('Host');}else if(host.indexOf(',')!==-1){// Note: X-Forwarded-Host is normally only ever a\n//       single value, but this is to be safe.\nhost=host.substring(0,host.indexOf(',')).trimRight();}if(!host)return;// IPv6 literal support\nvar offset=host[0]==='['?host.indexOf(']')+1:0;var index=host.indexOf(':',offset);return index!==-1?host.substring(0,index):host;});// TODO: change req.host to return host in next major\ndefineGetter(req,'host',deprecate.function(function host(){return this.hostname;},'req.host: Use req.hostname instead'));/**\n * Check if the request is fresh, aka\n * Last-Modified and/or the ETag\n * still match.\n *\n * @return {Boolean}\n * @public\n */defineGetter(req,'fresh',function(){var method=this.method;var res=this.res;var status=res.statusCode;// GET or HEAD for weak freshness validation only\nif('GET'!==method&&'HEAD'!==method)return false;// 2xx or 304 as per rfc2616 14.26\nif(status>=200&&status<300||304===status){return fresh(this.headers,{'etag':res.get('ETag'),'last-modified':res.get('Last-Modified')});}return false;});/**\n * Check if the request is stale, aka\n * \"Last-Modified\" and / or the \"ETag\" for the\n * resource has changed.\n *\n * @return {Boolean}\n * @public\n */defineGetter(req,'stale',function stale(){return!this.fresh;});/**\n * Check if the request was an _XMLHttpRequest_.\n *\n * @return {Boolean}\n * @public\n */defineGetter(req,'xhr',function xhr(){var val=this.get('X-Requested-With')||'';return val.toLowerCase()==='xmlhttprequest';});/**\n * Helper function for creating a getter on an object.\n *\n * @param {Object} obj\n * @param {String} name\n * @param {Function} getter\n * @private\n */function defineGetter(obj,name,getter){Object.defineProperty(obj,name,{configurable:true,enumerable:true,get:getter});}","map":{"version":3,"names":["accepts","require","deprecate","isIP","typeis","http","fresh","parseRange","parse","proxyaddr","req","Object","create","IncomingMessage","prototype","module","exports","get","header","name","TypeError","lc","toLowerCase","headers","referrer","referer","accept","types","apply","arguments","acceptsEncodings","encodings","acceptsEncoding","function","acceptsCharsets","charsets","acceptsCharset","acceptsLanguages","languages","acceptsLanguage","range","size","options","param","defaultValue","params","body","query","args","length","hasOwnProperty","is","arr","Array","isArray","i","defineGetter","protocol","proto","connection","encrypted","trust","app","remoteAddress","index","indexOf","substring","trim","secure","ip","ips","addrs","all","reverse","pop","subdomains","hostname","offset","split","slice","path","pathname","host","trimRight","method","res","status","statusCode","stale","xhr","val","obj","getter","defineProperty","configurable","enumerable"],"sources":["C:/Users/Autor/Desktop/LaRuinaTV/api/src/Routes/server/node_modules/express/lib/request.js"],"sourcesContent":["/*!\n * express\n * Copyright(c) 2009-2013 TJ Holowaychuk\n * Copyright(c) 2013 Roman Shtylman\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar accepts = require('accepts');\nvar deprecate = require('depd')('express');\nvar isIP = require('net').isIP;\nvar typeis = require('type-is');\nvar http = require('http');\nvar fresh = require('fresh');\nvar parseRange = require('range-parser');\nvar parse = require('parseurl');\nvar proxyaddr = require('proxy-addr');\n\n/**\n * Request prototype.\n * @public\n */\n\nvar req = Object.create(http.IncomingMessage.prototype)\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = req\n\n/**\n * Return request header.\n *\n * The `Referrer` header field is special-cased,\n * both `Referrer` and `Referer` are interchangeable.\n *\n * Examples:\n *\n *     req.get('Content-Type');\n *     // => \"text/plain\"\n *\n *     req.get('content-type');\n *     // => \"text/plain\"\n *\n *     req.get('Something');\n *     // => undefined\n *\n * Aliased as `req.header()`.\n *\n * @param {String} name\n * @return {String}\n * @public\n */\n\nreq.get =\nreq.header = function header(name) {\n  if (!name) {\n    throw new TypeError('name argument is required to req.get');\n  }\n\n  if (typeof name !== 'string') {\n    throw new TypeError('name must be a string to req.get');\n  }\n\n  var lc = name.toLowerCase();\n\n  switch (lc) {\n    case 'referer':\n    case 'referrer':\n      return this.headers.referrer\n        || this.headers.referer;\n    default:\n      return this.headers[lc];\n  }\n};\n\n/**\n * To do: update docs.\n *\n * Check if the given `type(s)` is acceptable, returning\n * the best match when true, otherwise `undefined`, in which\n * case you should respond with 406 \"Not Acceptable\".\n *\n * The `type` value may be a single MIME type string\n * such as \"application/json\", an extension name\n * such as \"json\", a comma-delimited list such as \"json, html, text/plain\",\n * an argument list such as `\"json\", \"html\", \"text/plain\"`,\n * or an array `[\"json\", \"html\", \"text/plain\"]`. When a list\n * or array is given, the _best_ match, if any is returned.\n *\n * Examples:\n *\n *     // Accept: text/html\n *     req.accepts('html');\n *     // => \"html\"\n *\n *     // Accept: text/*, application/json\n *     req.accepts('html');\n *     // => \"html\"\n *     req.accepts('text/html');\n *     // => \"text/html\"\n *     req.accepts('json, text');\n *     // => \"json\"\n *     req.accepts('application/json');\n *     // => \"application/json\"\n *\n *     // Accept: text/*, application/json\n *     req.accepts('image/png');\n *     req.accepts('png');\n *     // => undefined\n *\n *     // Accept: text/*;q=.5, application/json\n *     req.accepts(['html', 'json']);\n *     req.accepts('html', 'json');\n *     req.accepts('html, json');\n *     // => \"json\"\n *\n * @param {String|Array} type(s)\n * @return {String|Array|Boolean}\n * @public\n */\n\nreq.accepts = function(){\n  var accept = accepts(this);\n  return accept.types.apply(accept, arguments);\n};\n\n/**\n * Check if the given `encoding`s are accepted.\n *\n * @param {String} ...encoding\n * @return {String|Array}\n * @public\n */\n\nreq.acceptsEncodings = function(){\n  var accept = accepts(this);\n  return accept.encodings.apply(accept, arguments);\n};\n\nreq.acceptsEncoding = deprecate.function(req.acceptsEncodings,\n  'req.acceptsEncoding: Use acceptsEncodings instead');\n\n/**\n * Check if the given `charset`s are acceptable,\n * otherwise you should respond with 406 \"Not Acceptable\".\n *\n * @param {String} ...charset\n * @return {String|Array}\n * @public\n */\n\nreq.acceptsCharsets = function(){\n  var accept = accepts(this);\n  return accept.charsets.apply(accept, arguments);\n};\n\nreq.acceptsCharset = deprecate.function(req.acceptsCharsets,\n  'req.acceptsCharset: Use acceptsCharsets instead');\n\n/**\n * Check if the given `lang`s are acceptable,\n * otherwise you should respond with 406 \"Not Acceptable\".\n *\n * @param {String} ...lang\n * @return {String|Array}\n * @public\n */\n\nreq.acceptsLanguages = function(){\n  var accept = accepts(this);\n  return accept.languages.apply(accept, arguments);\n};\n\nreq.acceptsLanguage = deprecate.function(req.acceptsLanguages,\n  'req.acceptsLanguage: Use acceptsLanguages instead');\n\n/**\n * Parse Range header field, capping to the given `size`.\n *\n * Unspecified ranges such as \"0-\" require knowledge of your resource length. In\n * the case of a byte range this is of course the total number of bytes. If the\n * Range header field is not given `undefined` is returned, `-1` when unsatisfiable,\n * and `-2` when syntactically invalid.\n *\n * When ranges are returned, the array has a \"type\" property which is the type of\n * range that is required (most commonly, \"bytes\"). Each array element is an object\n * with a \"start\" and \"end\" property for the portion of the range.\n *\n * The \"combine\" option can be set to `true` and overlapping & adjacent ranges\n * will be combined into a single range.\n *\n * NOTE: remember that ranges are inclusive, so for example \"Range: users=0-3\"\n * should respond with 4 users when available, not 3.\n *\n * @param {number} size\n * @param {object} [options]\n * @param {boolean} [options.combine=false]\n * @return {number|array}\n * @public\n */\n\nreq.range = function range(size, options) {\n  var range = this.get('Range');\n  if (!range) return;\n  return parseRange(size, range, options);\n};\n\n/**\n * Return the value of param `name` when present or `defaultValue`.\n *\n *  - Checks route placeholders, ex: _/user/:id_\n *  - Checks body params, ex: id=12, {\"id\":12}\n *  - Checks query string params, ex: ?id=12\n *\n * To utilize request bodies, `req.body`\n * should be an object. This can be done by using\n * the `bodyParser()` middleware.\n *\n * @param {String} name\n * @param {Mixed} [defaultValue]\n * @return {String}\n * @public\n */\n\nreq.param = function param(name, defaultValue) {\n  var params = this.params || {};\n  var body = this.body || {};\n  var query = this.query || {};\n\n  var args = arguments.length === 1\n    ? 'name'\n    : 'name, default';\n  deprecate('req.param(' + args + '): Use req.params, req.body, or req.query instead');\n\n  if (null != params[name] && params.hasOwnProperty(name)) return params[name];\n  if (null != body[name]) return body[name];\n  if (null != query[name]) return query[name];\n\n  return defaultValue;\n};\n\n/**\n * Check if the incoming request contains the \"Content-Type\"\n * header field, and it contains the given mime `type`.\n *\n * Examples:\n *\n *      // With Content-Type: text/html; charset=utf-8\n *      req.is('html');\n *      req.is('text/html');\n *      req.is('text/*');\n *      // => true\n *\n *      // When Content-Type is application/json\n *      req.is('json');\n *      req.is('application/json');\n *      req.is('application/*');\n *      // => true\n *\n *      req.is('html');\n *      // => false\n *\n * @param {String|Array} types...\n * @return {String|false|null}\n * @public\n */\n\nreq.is = function is(types) {\n  var arr = types;\n\n  // support flattened arguments\n  if (!Array.isArray(types)) {\n    arr = new Array(arguments.length);\n    for (var i = 0; i < arr.length; i++) {\n      arr[i] = arguments[i];\n    }\n  }\n\n  return typeis(this, arr);\n};\n\n/**\n * Return the protocol string \"http\" or \"https\"\n * when requested with TLS. When the \"trust proxy\"\n * setting trusts the socket address, the\n * \"X-Forwarded-Proto\" header field will be trusted\n * and used if present.\n *\n * If you're running behind a reverse proxy that\n * supplies https for you this may be enabled.\n *\n * @return {String}\n * @public\n */\n\ndefineGetter(req, 'protocol', function protocol(){\n  var proto = this.connection.encrypted\n    ? 'https'\n    : 'http';\n  var trust = this.app.get('trust proxy fn');\n\n  if (!trust(this.connection.remoteAddress, 0)) {\n    return proto;\n  }\n\n  // Note: X-Forwarded-Proto is normally only ever a\n  //       single value, but this is to be safe.\n  var header = this.get('X-Forwarded-Proto') || proto\n  var index = header.indexOf(',')\n\n  return index !== -1\n    ? header.substring(0, index).trim()\n    : header.trim()\n});\n\n/**\n * Short-hand for:\n *\n *    req.protocol === 'https'\n *\n * @return {Boolean}\n * @public\n */\n\ndefineGetter(req, 'secure', function secure(){\n  return this.protocol === 'https';\n});\n\n/**\n * Return the remote address from the trusted proxy.\n *\n * The is the remote address on the socket unless\n * \"trust proxy\" is set.\n *\n * @return {String}\n * @public\n */\n\ndefineGetter(req, 'ip', function ip(){\n  var trust = this.app.get('trust proxy fn');\n  return proxyaddr(this, trust);\n});\n\n/**\n * When \"trust proxy\" is set, trusted proxy addresses + client.\n *\n * For example if the value were \"client, proxy1, proxy2\"\n * you would receive the array `[\"client\", \"proxy1\", \"proxy2\"]`\n * where \"proxy2\" is the furthest down-stream and \"proxy1\" and\n * \"proxy2\" were trusted.\n *\n * @return {Array}\n * @public\n */\n\ndefineGetter(req, 'ips', function ips() {\n  var trust = this.app.get('trust proxy fn');\n  var addrs = proxyaddr.all(this, trust);\n\n  // reverse the order (to farthest -> closest)\n  // and remove socket address\n  addrs.reverse().pop()\n\n  return addrs\n});\n\n/**\n * Return subdomains as an array.\n *\n * Subdomains are the dot-separated parts of the host before the main domain of\n * the app. By default, the domain of the app is assumed to be the last two\n * parts of the host. This can be changed by setting \"subdomain offset\".\n *\n * For example, if the domain is \"tobi.ferrets.example.com\":\n * If \"subdomain offset\" is not set, req.subdomains is `[\"ferrets\", \"tobi\"]`.\n * If \"subdomain offset\" is 3, req.subdomains is `[\"tobi\"]`.\n *\n * @return {Array}\n * @public\n */\n\ndefineGetter(req, 'subdomains', function subdomains() {\n  var hostname = this.hostname;\n\n  if (!hostname) return [];\n\n  var offset = this.app.get('subdomain offset');\n  var subdomains = !isIP(hostname)\n    ? hostname.split('.').reverse()\n    : [hostname];\n\n  return subdomains.slice(offset);\n});\n\n/**\n * Short-hand for `url.parse(req.url).pathname`.\n *\n * @return {String}\n * @public\n */\n\ndefineGetter(req, 'path', function path() {\n  return parse(this).pathname;\n});\n\n/**\n * Parse the \"Host\" header field to a hostname.\n *\n * When the \"trust proxy\" setting trusts the socket\n * address, the \"X-Forwarded-Host\" header field will\n * be trusted.\n *\n * @return {String}\n * @public\n */\n\ndefineGetter(req, 'hostname', function hostname(){\n  var trust = this.app.get('trust proxy fn');\n  var host = this.get('X-Forwarded-Host');\n\n  if (!host || !trust(this.connection.remoteAddress, 0)) {\n    host = this.get('Host');\n  } else if (host.indexOf(',') !== -1) {\n    // Note: X-Forwarded-Host is normally only ever a\n    //       single value, but this is to be safe.\n    host = host.substring(0, host.indexOf(',')).trimRight()\n  }\n\n  if (!host) return;\n\n  // IPv6 literal support\n  var offset = host[0] === '['\n    ? host.indexOf(']') + 1\n    : 0;\n  var index = host.indexOf(':', offset);\n\n  return index !== -1\n    ? host.substring(0, index)\n    : host;\n});\n\n// TODO: change req.host to return host in next major\n\ndefineGetter(req, 'host', deprecate.function(function host(){\n  return this.hostname;\n}, 'req.host: Use req.hostname instead'));\n\n/**\n * Check if the request is fresh, aka\n * Last-Modified and/or the ETag\n * still match.\n *\n * @return {Boolean}\n * @public\n */\n\ndefineGetter(req, 'fresh', function(){\n  var method = this.method;\n  var res = this.res\n  var status = res.statusCode\n\n  // GET or HEAD for weak freshness validation only\n  if ('GET' !== method && 'HEAD' !== method) return false;\n\n  // 2xx or 304 as per rfc2616 14.26\n  if ((status >= 200 && status < 300) || 304 === status) {\n    return fresh(this.headers, {\n      'etag': res.get('ETag'),\n      'last-modified': res.get('Last-Modified')\n    })\n  }\n\n  return false;\n});\n\n/**\n * Check if the request is stale, aka\n * \"Last-Modified\" and / or the \"ETag\" for the\n * resource has changed.\n *\n * @return {Boolean}\n * @public\n */\n\ndefineGetter(req, 'stale', function stale(){\n  return !this.fresh;\n});\n\n/**\n * Check if the request was an _XMLHttpRequest_.\n *\n * @return {Boolean}\n * @public\n */\n\ndefineGetter(req, 'xhr', function xhr(){\n  var val = this.get('X-Requested-With') || '';\n  return val.toLowerCase() === 'xmlhttprequest';\n});\n\n/**\n * Helper function for creating a getter on an object.\n *\n * @param {Object} obj\n * @param {String} name\n * @param {Function} getter\n * @private\n */\nfunction defineGetter(obj, name, getter) {\n  Object.defineProperty(obj, name, {\n    configurable: true,\n    enumerable: true,\n    get: getter\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}