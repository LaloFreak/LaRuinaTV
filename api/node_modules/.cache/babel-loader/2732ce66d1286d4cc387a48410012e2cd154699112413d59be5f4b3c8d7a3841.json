{"ast":null,"code":"/*!\n * body-parser\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */'use strict';/**\n * Module dependencies.\n * @private\n */var deprecate=require('depd')('body-parser');/**\n * Cache of loaded parsers.\n * @private\n */var parsers=Object.create(null);/**\n * @typedef Parsers\n * @type {function}\n * @property {function} json\n * @property {function} raw\n * @property {function} text\n * @property {function} urlencoded\n */ /**\n * Module exports.\n * @type {Parsers}\n */exports=module.exports=deprecate.function(bodyParser,'bodyParser: use individual json/urlencoded middlewares');/**\n * JSON parser.\n * @public\n */Object.defineProperty(exports,'json',{configurable:true,enumerable:true,get:createParserGetter('json')});/**\n * Raw parser.\n * @public\n */Object.defineProperty(exports,'raw',{configurable:true,enumerable:true,get:createParserGetter('raw')});/**\n * Text parser.\n * @public\n */Object.defineProperty(exports,'text',{configurable:true,enumerable:true,get:createParserGetter('text')});/**\n * URL-encoded parser.\n * @public\n */Object.defineProperty(exports,'urlencoded',{configurable:true,enumerable:true,get:createParserGetter('urlencoded')});/**\n * Create a middleware to parse json and urlencoded bodies.\n *\n * @param {object} [options]\n * @return {function}\n * @deprecated\n * @public\n */function bodyParser(options){var opts={};// exclude type option\nif(options){for(var prop in options){if(prop!=='type'){opts[prop]=options[prop];}}}var _urlencoded=exports.urlencoded(opts);var _json=exports.json(opts);return function bodyParser(req,res,next){_json(req,res,function(err){if(err)return next(err);_urlencoded(req,res,next);});};}/**\n * Create a getter for loading a parser.\n * @private\n */function createParserGetter(name){return function get(){return loadParser(name);};}/**\n * Load a parser module.\n * @private\n */function loadParser(parserName){var parser=parsers[parserName];if(parser!==undefined){return parser;}// this uses a switch for static require analysis\nswitch(parserName){case'json':parser=require('./lib/types/json');break;case'raw':parser=require('./lib/types/raw');break;case'text':parser=require('./lib/types/text');break;case'urlencoded':parser=require('./lib/types/urlencoded');break;}// store to prevent invoking require()\nreturn parsers[parserName]=parser;}","map":{"version":3,"names":["deprecate","require","parsers","Object","create","exports","module","function","bodyParser","defineProperty","configurable","enumerable","get","createParserGetter","options","opts","prop","_urlencoded","urlencoded","_json","json","req","res","next","err","name","loadParser","parserName","parser","undefined"],"sources":["C:/Users/Autor/Desktop/LaRuinaTV/api/src/node_modules/body-parser/index.js"],"sourcesContent":["/*!\n * body-parser\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar deprecate = require('depd')('body-parser')\n\n/**\n * Cache of loaded parsers.\n * @private\n */\n\nvar parsers = Object.create(null)\n\n/**\n * @typedef Parsers\n * @type {function}\n * @property {function} json\n * @property {function} raw\n * @property {function} text\n * @property {function} urlencoded\n */\n\n/**\n * Module exports.\n * @type {Parsers}\n */\n\nexports = module.exports = deprecate.function(bodyParser,\n  'bodyParser: use individual json/urlencoded middlewares')\n\n/**\n * JSON parser.\n * @public\n */\n\nObject.defineProperty(exports, 'json', {\n  configurable: true,\n  enumerable: true,\n  get: createParserGetter('json')\n})\n\n/**\n * Raw parser.\n * @public\n */\n\nObject.defineProperty(exports, 'raw', {\n  configurable: true,\n  enumerable: true,\n  get: createParserGetter('raw')\n})\n\n/**\n * Text parser.\n * @public\n */\n\nObject.defineProperty(exports, 'text', {\n  configurable: true,\n  enumerable: true,\n  get: createParserGetter('text')\n})\n\n/**\n * URL-encoded parser.\n * @public\n */\n\nObject.defineProperty(exports, 'urlencoded', {\n  configurable: true,\n  enumerable: true,\n  get: createParserGetter('urlencoded')\n})\n\n/**\n * Create a middleware to parse json and urlencoded bodies.\n *\n * @param {object} [options]\n * @return {function}\n * @deprecated\n * @public\n */\n\nfunction bodyParser (options) {\n  var opts = {}\n\n  // exclude type option\n  if (options) {\n    for (var prop in options) {\n      if (prop !== 'type') {\n        opts[prop] = options[prop]\n      }\n    }\n  }\n\n  var _urlencoded = exports.urlencoded(opts)\n  var _json = exports.json(opts)\n\n  return function bodyParser (req, res, next) {\n    _json(req, res, function (err) {\n      if (err) return next(err)\n      _urlencoded(req, res, next)\n    })\n  }\n}\n\n/**\n * Create a getter for loading a parser.\n * @private\n */\n\nfunction createParserGetter (name) {\n  return function get () {\n    return loadParser(name)\n  }\n}\n\n/**\n * Load a parser module.\n * @private\n */\n\nfunction loadParser (parserName) {\n  var parser = parsers[parserName]\n\n  if (parser !== undefined) {\n    return parser\n  }\n\n  // this uses a switch for static require analysis\n  switch (parserName) {\n    case 'json':\n      parser = require('./lib/types/json')\n      break\n    case 'raw':\n      parser = require('./lib/types/raw')\n      break\n    case 'text':\n      parser = require('./lib/types/text')\n      break\n    case 'urlencoded':\n      parser = require('./lib/types/urlencoded')\n      break\n  }\n\n  // store to prevent invoking require()\n  return (parsers[parserName] = parser)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}